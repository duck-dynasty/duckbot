AWSTemplateFormatVersion: 2010-09-09

Parameters:
  DuckBotImage:
    Type: String
    Default: "duckdynasty/duckbot:latest"

  EcsOptimizedAmi: # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: duckbot

  # NOTE when changing, ensure the docker-compose stack matches!
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: duckbot
      ContainerDefinitions:
      - Name: duckbot
        Image: !Ref DuckBotImage
        Essential: true
        Links: [postgres]
        # NOTE secrets are created during the `deploy` github action
        Secrets:
        - Name: DISCORD_TOKEN
          ValueFrom: /duckbot/token/discord
        - Name: OPENWEATHER_TOKEN
          ValueFrom: /duckbot/token/openweather
        - Name: GITHUB_TOKEN
          ValueFrom: /duckbot/token/github
        - Name: WOLFRAM_ALPHA_TOKEN
          ValueFrom: /duckbot/token/wolfram-alpha
        - Name: OXFORD_DICTIONARY_ID
          ValueFrom: /duckbot/token/oxford-dictionary/id
        - Name: OXFORD_DICTIONARY_KEY
          ValueFrom: /duckbot/token/oxford-dictionary/key
        HealthCheck:
          Command: [CMD, python, -m, duckbot.health]
          Interval: 30
          Timeout: 10
          Retries: 3
          StartPeriod: 30
        LogConfiguration:
          LogDriver: awslogs
          Options:
            "awslogs-region": !Ref AWS::Region
            "awslogs-group": !Ref LogGroup
            "awslogs-stream-prefix": ecs
      - Name: postgres
        Image: "postgres:13.2"
        Essential: false
        Environment:
        - Name: POSTGRES_USER
          Value: duckbot
        - Name: POSTGRES_PASSWORD
          Value: pond
        - Name: PGDATA
          Value: /data/postgres
        MountPoints:
        - SourceVolume: duckbot_dbdata
          ContainerPath: /data/postgres
          ReadOnly: false
        HealthCheck:
          Command: [CMD, pg_isready, -U, duckbot]
          Interval: 30
          Timeout: 5
          Retries: 3
          StartPeriod: 30
        LogConfiguration:
          LogDriver: awslogs
          Options:
            "awslogs-region": !Ref AWS::Region
            "awslogs-group": !Ref LogGroup
            "awslogs-stream-prefix": ecs
      Volumes:
      - Name: duckbot_dbdata
        EFSVolumeConfiguration:
          FilesystemId: !Ref FileSystem
          RootDirectory: /
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      Memory: 960
      NetworkMode: bridge
      RequiresCompatibilities: [EC2]

  FileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      FileSystemTags:
      - Key: Name
        Value: duckbot_dbdata

  DuckBotService:
    Type: AWS::ECS::Service
    DependsOn: AutoScalingGroup
    Properties:
      Cluster: !GetAtt Cluster.Arn
      ServiceName: duckbot
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 0
        MaximumPercent: 100
      LaunchType: EC2

  AutoScalingLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref EcsOptimizedAmi
      InstanceType: t2.micro
      IamInstanceProfile: !Ref IamRoleInstanceProfile
      KeyName: duckbot  # needs to be created manually
      InstanceMonitoring: false
      SecurityGroups: [!Ref AutoScalingSecurityGroup]
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: duckbot
      RetentionInDays: 30

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: [sts:AssumeRole]
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
      - PolicyName: AccessPropertyStore
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: [ssm:GetParameters]
            Resource: [!Sub "arn:aws:ssm:*:${AWS::AccountId}:parameter/duckbot/*"]

  ContainerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: [sts:AssumeRole]
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  IamRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: duckbot-ecs-instance-profile
      Roles: [!Ref ContainerServiceRole]

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: 0
      MaxSize: 1
      DesiredCapacity: 1
      VPCZoneIdentifier: [!Sub "${SubnetZone0}, ${SubnetZone1}"]
      LaunchConfigurationName: !Ref AutoScalingLaunchConfig

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  RouteViaInternetGateway:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
  PublicRouteViaInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteViaInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetZone0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: true
  SubnetZone1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref AWS::Region]
      MapPublicIpOnLaunch: true

  SubnetZone0RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetZone0
      RouteTableId: !Ref RouteViaInternetGateway
  SubnetZone1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetZone1
      RouteTableId: !Ref RouteViaInternetGateway

  FileSystemMountZone0:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups: [!Ref FileSystemSecurityGroup]
      SubnetId: !Ref SubnetZone0
  FileSystemMountZone1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SecurityGroups: [!Ref FileSystemSecurityGroup]
      SubnetId: !Ref SubnetZone1

  AutoScalingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DuckBot ECS Security Group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
  FileSystemSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: DuckBot File System Security Group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
        SourceSecurityGroupId: !GetAtt AutoScalingSecurityGroup.GroupId
